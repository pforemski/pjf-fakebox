#!/bin/bash
#
# Fakebox, a simple cross-compilation toolkit
#
# Copyright (C) 2007-2011 ASN Sp. z o.o.
# Copyright (C) 2011 Pawe≈Ç Foremski <pawel@foremski.pl>
#
# Authors: Pawel Foremski <pjf@asn.pl>
#          Michal Wrobel <maw@asn.pl>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place - Suite 330, Boston, MA 02111-1307, USA.
#
# vim: tw=120
#

export FB_TOP="$PWD"

function help()
{
	cat <<-EOF
	Usage: fakebox <target> <startdir> [-fr]
	
	Options:
		-f                  force binfmt_misc register, even if already done
		-r                  exit after registering binfmt_misc
	EOF
}

function asroot()
{
	if [[ $UID -ne 0 ]]; then
		echo "Hint: you are not root - will use sudo" >&2
		echo "If it fails, run me as root with -r and then again as $USER" >&2

		sudo "$@"
		return $?
	else
		"$@"
		return $?
	fi
}

### CLI args
if [[ -n "$1" && "${1:0:1}" != "-" ]]; then
	export FB_TARGET="`basename $1`"
	shift
fi

if [[ -n "$1" && "${1:0:1}" != "-" ]]; then
	export FB_STARTDIR="$1"
	shift
fi

while [[ -n "$1" ]]; do
	case "$1" in
		"-f") OPT_register=1;;
		"-r") OPT_exit_after_register=1;;
		   *) echo "Invalid option: $1" >&2; help >&2; exit 1;;
	esac
	shift
done

### target config
if [[ -n "$FB_TARGET" ]]; then
	source $FB_TOP/$FB_TARGET/fakebox.conf || exit 1
	FB_TOOLCHAIN=${FB_TOOLCHAIN:-$FB_TOP/$FB_TARGET/toolchain}
	FB_ROOTFS=${FB_ROOTFS:-$FB_TOP/$FB_TARGET/rootfs}
else
	source $FB_TOP/fakebox.conf || exit 1
	FB_TOOLCHAIN=${FB_TOOLCHAIN:-$FB_TOP/toolchain}
	FB_ROOTFS=${FB_ROOTFS:-$FB_TOP/rootfs}
fi

### our variables, defaults
if ! [ -e "$FB_TOOLCHAIN" ]; then
	echo 'FB_TOOLCHAIN directory $FB_TOOLCHAIN does not exist!' >&2
	exit 1
fi

if [ -z "$FB_WRAP" ]; then
	if [ -z "$FB_PREFIX" ]; then
		FB_WRAP="`find $FB_TOOLCHAIN/ -name '*-gcc' | head -n1 | sed -e "s/-gcc$//"`"
	else
		FB_WRAP=$FB_TOOLCHAIN/bin/$FB_PREFIX
	fi
fi
if [ -z "$FB_PREFIX" ]; then
	FB_PREFIX=${FB_WRAP##*/}
fi

FB_DEBUG=${FB_DEBUG:-0}
FB_BINFMT_QEMUWRAP="${FB_BINFMT_QEMUWRAP:-$FB_TOP/fakebox/wrappers/qemuwrap}"

if [[ -z "$FB_LEAVE_PATH" ]]; then
	PATH="$FB_PATH:$FB_TOP/bin:$FB_TOP/fakebox/wrappers"
	PATH="$PATH:$FB_TOOLCHAIN/bin"
	PATH="$PATH:$HOME/bin:$HOME/local/bin:/usr/local/bin:/usr/local/sbin"
	PATH="$PATH:/usr/bin:/usr/sbin:/bin:/sbin"
fi

if [[ "$FB_CCACHE" = "1" ]]; then
	FB_CCACHE_PATH="${FB_CCACHE_PATH:-`which ccache`}"
fi

# hack for c preprocessor in some weird toolchains
CPP="cpp"

# for autotools?
CARCH="$FB_QEMU"
CHOST="$FB_PREFIX"

# magic flag
FAKEBOX=1

### Export VARIABLES
vars=( `set | sed -re '/^[A-Z][A-Z0-9_]*=/!d' -e 's;=.*;;g'` )
export "${vars[@]}"

### get binfmt_misc details
if [[ -n "$FB_QEMU" ]]; then
	# 0x7f, ELF, \0, { 1 - LE, 2 - BE }, 12 x 0x00, 2-byte arch ID in given endianness
	# XXX: below supports big-endians only
	MAGIC=`
	echo -n "\x7f\x45\x4c\x46\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
	case "$FB_QEMU" in
		ppc)   echo -n "\x14";;
		mips)  echo -n "\x08";;
		armeb) echo -n "\x28";;
		*)     echo "Unsupported arch: $FB_QEMU" >&2; exit 1;;
	esac`

	notsupported=$?
	MASK="\xff\xff\xff\xff\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff"
	MAGIC_PLAIN=${MAGIC//\\x/}
	MASK_PLAIN=${MASK//\\x/}
else
	notsupported=1
fi

### try loading
if [[ $notsupported -eq 0 ]] ; then
	# check if binfmt_misc is already loaded
	if [[ ! -e /proc/sys/fs/binfmt_misc/register ]] ; then
		asroot modprobe binfmt_misc || exit 1
		asroot mount -t binfmt_misc none /proc/sys/fs/binfmt_misc || exit 1
	fi

	# remove any existing registration with the same magic
	for f in /proc/sys/fs/binfmt_misc/*; do
		[[ -e "$f" ]] || continue
		name="`basename $f`"

		[[ "$name" = "register" ]] && continue
		{ [[ "$OPT_register" != "1" ]]  && [[ "$name" = "fakebox-$FB_QEMU" ]]; } && continue

		grep -q "magic $MAGIC_PLAIN" $f || continue
		grep -q "mask $MASK_PLAIN" $f || continue

		echo -e "\nWarning: Removing existing binfmt_misc wrapper: $name"
		echo "-1" | asroot dd of=$f status=noxfer || exit 1
	done

	if [[ ! -f /proc/sys/fs/binfmt_misc/fakebox-$FB_QEMU ]] ; then
		# register us XXX: no 2>/dev/null for dd's crappy msgs in order to see errors
		echo "Registering fakebox-$FB_QEMU in binfmt_misc"
		echo ":fakebox-$FB_QEMU:M:0:$MAGIC:$MASK:$FB_BINFMT_QEMUWRAP:" \
			| asroot dd of=/proc/sys/fs/binfmt_misc/register status=noxfer || exit 1

		if [[ -e /proc/sys/vm/mmap_min_addr ]] ; then
			echo "Fixing mmap bug"
			echo 4096 | asroot dd of=/proc/sys/vm/mmap_min_addr status=noxfer || exit 1
		fi
	fi
else
	echo "Warning: qemu emulation not loaded"
fi

###
### start
###

if [[ "$OPT_exit_after_register" = "1" ]]; then
	echo "Registration done"
	exit 0
else
	/bin/bash --noprofile --rcfile "${FB_BASHRC:-$FB_TOP/fakebox/bashrc}"
fi
